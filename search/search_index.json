{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HomingCast","text":""},{"location":"#homingcast-is-a-module-that-allows-you-to-create-dynamic-real-time-simulated-homing-projectiles-without-relying-on-physics-for-example-it-can-be-used-for-missiles-spells-or-homing-bullets","title":"HomingCast is a module that allows you to create dynamic, real-time simulated homing projectiles without relying on physics. For example, it can be used for missiles, spells, or homing bullets!","text":""},{"location":"#download-the-homingcast","title":"Download the HomingCast","text":""},{"location":"#it-is-similar-to-fastcast-which-is-designed-to-simulate-projectile-drop-physics-however-the-purpose-of-my-module-is-to-provide-you-with-the-tools-to-create-amazing-homing-projectiles-without-using-robloxs-physics","title":"It is similar to FastCast, which is designed to simulate projectile drop physics. However, the purpose of my module is to provide you with the tools to create amazing homing projectiles without using Roblox's physics","text":""},{"location":"Caster/","title":"Caster","text":""},{"location":"Caster/#what-is-caster","title":"What is Caster?","text":"<p>This page describes what the <code>Caster</code></p>"},{"location":"Caster/#how-to-get-caster","title":"How to get Caster","text":"<p>To get <code>Caster</code>, you first need to require the module:</p> <pre><code>local HomingCast = require(.../HomingCast)\n</code></pre> <p>Then, create the <code>Caster</code>:</p> <pre><code>local Caster = HomingCast.new()\n</code></pre> <p>Remember!</p> <p>The <code>Caster</code> must be created only once, as it serves as the base for all casts</p>"},{"location":"Caster/#what-is-caster_1","title":"What is Caster?","text":"<p><code>Caster</code> is used to start the simulation of a cast</p> <pre><code>Caster:Fire(StartPosition: Vector3, StartDirection: Vector3, Speed: number | Vector3, Target: Model | BasePart | Vector3, Properties, PhysicsProperties?)\n</code></pre> <p>How to get Properties?</p> <p>To get <code>Properties</code>, use:</p> <pre><code>local Properties: {} = HomingCast.NewProperties()\n</code></pre> <p>Read more about Properties.</p> <p>The <code>Caster:Fire</code> function returns an InfoCast</p> <p>Beware</p> <p>If you use physics simulation, <code>speed</code> parameter will become not a constant speed, but an impulse</p> <p>If <code>Speed</code> parameter is number then impluse will be applied in <code>StartDirection</code></p>"},{"location":"Caster/#caster-contains-5-signals","title":"Caster contains 5 signals","text":""},{"location":"Caster/#positionchanged","title":"PositionChanged","text":"<pre><code>PositionChanged(InfoCast, Position: Vector3, Direction: Vector3, Distance: number, Target: Vector3 | BasePart, CosmeticBullet: any?, UserData: {})\n</code></pre> <p>This signal fires every time the <code>Caster</code> moves</p> <p>Useful Tip!</p> <p>If you want your projectile to follow the path and align with the flight direction, use this code:</p> <pre><code>Caster.PositionChanged:Connect(function(...) \n    if CosmeticBullet then\n        local BulletSize = CosmeticBullet.Size.Z / 2\n        local Offset = CFrame.new(0, 0, -(Distance - BulletSize))\n        CosmeticBullet.CFrame = CFrame.lookAt(Position, Position + Direction):ToWorldSpace(Offset)\n    end\nend)\n</code></pre>"},{"location":"Caster/#rayhit","title":"RayHit","text":"<pre><code>RayHit(InfoCast, RayCastResult: RaycastResult, Direction: Vector3, CosmeticBullet: any?, UserData: {})\n</code></pre> <p>This signal fires when the <code>Caster</code> hits something</p>"},{"location":"Caster/#terminated","title":"Terminated","text":"<pre><code>Terminated(InfoCast, Reason: string, CosmeticBullet: BasePart?, UserData: {})\n</code></pre> <p>This signal fires when the <code>Caster</code> terminates due to exceeding the maximum flight distance, exceeding maximum flight time, or being manually terminated</p> <p>What is <code>Reason</code>?</p> <p>The <code>Reason</code> parameter indicates why the cast was terminated. Possible values:</p> <ul> <li><code>Custom Reason</code> - The reason that was defined in <code>TerminateCast</code> method</li> <li><code>Self</code> - The cast was terminated manually</li> <li><code>MaxDistance</code> - The cast exceeded the maximum flight distance</li> <li><code>MaxFlyTime</code> - The cast exceeded the maximum flight time</li> </ul>"},{"location":"Caster/#targetlost","title":"TargetLost","text":"<pre><code>TargetLost(InfoCast, LostTarget: Vector3 | BasePart, Position: Vector3, Direction: Vector3, CosmeticBullet: any?, UserData: {})\n</code></pre> <p>This signal fires when the <code>Caster</code> loses its target</p>"},{"location":"Caster/#checkpointreached","title":"CheckpointReached","text":"<pre><code>CheckpointReached(InfoCast, CheckpointName: string, Position: Vector3, Direction: Vector3, CosmeticBulletTemplate: any?, UserData: {})\n</code></pre> <p>This signal fires when the <code>Caster</code> reaches a point in the trajectory</p> <p>Custom Trajectory</p> <p>More information about Custom Trajectories.</p>"},{"location":"CustomTrajectories/","title":"Custom Trajectories","text":""},{"location":"CustomTrajectories/#what-is-custom-trajectory","title":"What is Custom Trajectory?","text":"<p><code>Custom Trajectory</code> is a property in Properties called <code>Trajectory</code>, which makes the Caster follow a predefined path.</p>"},{"location":"CustomTrajectories/#how-do-i-get-this-trajectory","title":"How do I get this <code>Trajectory</code>?","text":"<p>I created a plugin to simplify this process for you. Here is the plugin.</p>"},{"location":"CustomTrajectories/#how-to-use-this-plugin","title":"How to use this Plugin?","text":"<p>Here are all the controls:</p> <ul> <li>Double-click to create a new point. (These points are draggable.)</li> </ul> <p>Reminder!</p> <p>Since these points use <code>UI Drag Detectors</code>, you need to enable the beta feature in Roblox Studio called <code>UI Drag Detectors</code></p> <ul> <li>Press <code>E</code> on a point to change its state</li> </ul> <p>What is <code>State</code>?</p> <p>Each point currently has two states:</p> <ul> <li>Free</li> <li>Locked on Y-axis</li> </ul> <p>If a point is locked on the Y-axis, its height won't be affected by the start position of the cast or the target's position.  The Free state is the standard state, allowing height to change during flight</p> <ul> <li>Use the mouse wheel to adjust the maximum height</li> <li>Press <code>G</code> on a point to create a checkpoint</li> </ul> <p>What is a <code>Checkpoint</code>?</p> <p>A checkpoint contains a name. When the <code>Caster</code> reaches this point, it will fire the <code>CheckpointReached</code> signal.</p>"},{"location":"CustomTrajectories/#saving-and-using-the-trajectory","title":"Saving and using the <code>Trajectory</code>","text":"<p>Once you've created the points, press the Save button. This will generate a <code>script</code> in <code>ReplicatedStorage</code> containing the trajectory table. Copy and paste this table into the <code>Trajectory</code> property</p> <p>Example</p> <pre><code>Properties.Trajectory = {\n    {Yscale = 0.3, Xscale = 0.12220414727926254, State = \"Free\", MaxHeight = 150},\n    {Yscale = 0.6, Xscale = 0.310281366109848, State = \"Free\", MaxHeight = 150},\n    {Yscale = 0.6, Xscale = 0.903989744186401, State = \"Free\", CheckPoint = \"Above\", MaxHeight = 150},\n}\n</code></pre>"},{"location":"CustomTrajectories/#modes","title":"Modes","text":"<p>There're 2 modes:</p> <ul> <li>Trajectory - To create a custom trajectory curve (default)</li> <li>AoA - To create yaw / pitch angle of attack tables</li> </ul> <p>To change the mode, click <code>Mode</code> button</p>"},{"location":"InfoCast/","title":"InfoCast","text":""},{"location":"InfoCast/#what-is-infocast","title":"What is InfoCast?","text":"<p>InfoCast is a modified version of Caster. It contains all properties, the current position, direction, reference to the <code>Caster</code>, etc.</p>"},{"location":"InfoCast/#where-do-i-get-infocast","title":"Where do I get InfoCast?","text":"<p>InfoCast is returned in all 5 signals. Read more about it here.</p> <p>Additionally, when you start a simulation using:</p> <pre><code>local InfoCast = Caster:Fire(...)\n</code></pre> <p>You will receive an <code>InfoCast</code>.</p>"},{"location":"InfoCast/#retrieving-all-active-infocast","title":"Retrieving all active InfoCast","text":"<p>You can retrieve all currently simulated <code>InfoCast</code> using the function <code>HomingCast.GetAllInfoCast()</code>:</p> <pre><code>local HomingCast = require(.../HomingCast)\n\nlocal PreActiveInfoCasts, PostActiveInfoCasts = HomingCast.GetAllInfoCast()\n</code></pre> <p>Returns 2 tables that contain all <code>PreActiveInfoCasts</code> and all <code>PostActiveInfoCasts</code> (PreSimulation and PostSimulation)</p>"},{"location":"Methods/","title":"Methods","text":""},{"location":"Methods/#at-this-page-you-can-see-all-methods-that-are-currently-implemented","title":"At this page, you can see all methods that are currently implemented","text":"<p>Remember!</p> <p>These methods must be applied to InfoCast</p>"},{"location":"Methods/#non-physics-methods","title":"Non-Physics methods","text":""},{"location":"Methods/#terminatecast","title":"TerminateCast","text":"<p><pre><code>InfoCast:TerminateCast(customReason: string?)\n</code></pre> Terminates the cast.</p>"},{"location":"Methods/#settimer","title":"SetTimer","text":"<p><pre><code>InfoCast:SetTimer(duration: number, func(A...) -&gt; (R...), parameters: A...)\n</code></pre> Sets a timer that runs the given function after the specified time.</p>"},{"location":"Methods/#getcosmeticbullet","title":"GetCosmeticBullet","text":"<p><pre><code>InfoCast:GetCosmeticBullet(): any?\n</code></pre> Retuns copied cosmetic bullet.</p>"},{"location":"Methods/#setspeed","title":"SetSpeed","text":"<p><pre><code>InfoCast:SetSpeed(Speed: number | Vector3)\n</code></pre> Sets the speed of the cast.</p>"},{"location":"Methods/#addspeed","title":"AddSpeed","text":"<p><pre><code>InfoCast:AddSpeed(Speed: number | Vector3)\n</code></pre> Adds the speed to the cast.</p>"},{"location":"Methods/#getspeed","title":"GetSpeed","text":"<p><pre><code>InfoCast:GetSpeed(): (number | Vector3)\n</code></pre> Returns the current speed of the cast.</p>"},{"location":"Methods/#getposition","title":"GetPosition","text":"<p><pre><code>InfoCast:GetPosition(): Vector3\n</code></pre> Returns the current position of the cast.</p>"},{"location":"Methods/#getdirection","title":"GetDirection","text":"<p><pre><code>InfoCast:GetDirection(): Vector3\n</code></pre> Returns the current direction of the cast.</p>"},{"location":"Methods/#setdirection","title":"SetDirection","text":"<p><pre><code>InfoCast:SetDirection(Direction: Vector3)\n</code></pre> Sets the direction of the cast.</p>"},{"location":"Methods/#setposition","title":"SetPosition","text":"<p><pre><code>InfoCast:SetPosition(Position: Vector3)\n</code></pre> Sets the position of the cast.</p> <p>Remember!</p> <p>Angles must not be in radians.</p>"},{"location":"Methods/#setrotationspeed","title":"SetRotationSpeed","text":"<p><pre><code>InfoCast:SetRotationSpeed(Number: number)\n</code></pre> Sets the speed of rotation of the cast.</p>"},{"location":"Methods/#addrotationspeed","title":"AddRotationSpeed","text":"<p><pre><code>InfoCast:AddRotationSpeed(Number: number)\n</code></pre> Adds the speed of rotation to the cast.</p>"},{"location":"Methods/#setmaxangletolosethetarget","title":"SetMaxAngleToLoseTheTarget","text":"<p><pre><code>InfoCast:SetMaxAngleToLoseTheTarget(Angle: number)\n</code></pre> Sets the angle at which the cast loses its target.</p>"},{"location":"Methods/#addmaxangletolosethetarget","title":"AddMaxAngleToLoseTheTarget","text":"<p><pre><code>InfoCast:AddMaxAngleToLoseTheTarget(Angle: number)\n</code></pre> Adds to the angle at which the cast loses its target.</p>"},{"location":"Methods/#pause","title":"Pause","text":"<p><pre><code>InfoCast:Pause()\n</code></pre> Pauses the simulation of the cast.</p>"},{"location":"Methods/#resume","title":"Resume","text":"<p><pre><code>InfoCast:Resume()\n</code></pre> Resumes the simulation of the cast.</p>"},{"location":"Methods/#ispaused","title":"IsPaused","text":"<p><pre><code>InfoCast:IsPaused(): boolean\n</code></pre> Returns <code>true</code> if the cast is paused, otherwise <code>false</code>.</p>"},{"location":"Methods/#pausetrajectory","title":"PauseTrajectory","text":"<p><pre><code>InfoCast:PauseTrajectory()\n</code></pre> Pauses the trajectory from advancing.</p>"},{"location":"Methods/#resumetrajectory","title":"ResumeTrajectory","text":"<p><pre><code>InfoCast:ResumeTrajectory()\n</code></pre> Resumes the trajectory.</p>"},{"location":"Methods/#ispausedtrajectory","title":"IsPausedTrajectory","text":"<p><pre><code>InfoCast:IsPausedTrajectory(): boolean\n</code></pre> Returns <code>true</code> if the trajectory is paused, otherwise <code>false</code>.</p>"},{"location":"Methods/#getprogress","title":"GetProgress","text":"<p><pre><code>InfoCast:GetProgress(): (number, number, number?, number?)\n</code></pre> Returns the current covered distance and total flight time. If the covered distance is greater than or equal to <code>0</code>, it also returns the percentage of how far the cast has traveled. The same applies to the total flight time.</p>"},{"location":"Methods/#updateraycastparams","title":"UpdateRaycastParams","text":"<p><pre><code>InfoCast:UpdateRaycastParams(Params: RaycastParams)\n</code></pre> Sets new raycast parameters for the cast.</p>"},{"location":"Methods/#setxscale","title":"SetXscale","text":"<p><pre><code>InfoCast:SetXscale(index: number, value: number)\n</code></pre> Sets the X scale of a trajectory point to a given value (from <code>0</code> to <code>1</code>). The <code>index</code> determines the position in the trajectory list.</p>"},{"location":"Methods/#setyscale","title":"SetYscale","text":"<p><pre><code>InfoCast:SetYscale(index: number, value: number)\n</code></pre> Sets the Y scale of a trajectory point to a given value (from <code>-1</code> to <code>1</code>). The <code>index</code> determines the position in the trajectory list.</p>"},{"location":"Methods/#getdistancetotarget","title":"GetDistanceToTarget","text":"<p><pre><code>InfoCast:GetDistanceToTarget(): number?\n</code></pre> Returns the distance to the target if the target is not <code>nil</code>, otherwise returns <code>nil</code>.</p>"},{"location":"Methods/#gettargetinfo","title":"GetTargetInfo","text":"<p><pre><code>InfoCast:GetTargetInfo(): (Vector3?, Vector3?)\n</code></pre> Returns the position and velocity of the target. If the target is a <code>Vector3</code>, it only returns the position. If the target is <code>nil</code>, both return values will be <code>nil</code>.</p>"},{"location":"Methods/#sethighprecision","title":"SetHighPrecision","text":"<p><pre><code>InfoCast:SetHighPrecision(value: number)\n</code></pre> Sets the high precision mode to the given value.</p>"},{"location":"Methods/#settarget","title":"SetTarget","text":"<p><pre><code>InfoCast:SetTarget(Target: Vector3 | BasePart | Model | nil)\n</code></pre> Sets the target to the given value.</p> <p>Remember!</p> <p>The <code>Model</code> must have its primary part set; otherwise, an error will occur!</p> <p>Beware!</p> <p>Setting a new target too frequently can lead to unexpected behaviors!</p>"},{"location":"Methods/#setoffset","title":"SetOffset","text":"<p><pre><code>InfoCast:SetOffset(func: (number, number, Vector3, Vector3) -&gt; (Vector3))\n</code></pre> Sets the new <code>Offset</code> function.</p>"},{"location":"Methods/#setoffset_1","title":"SetOffset","text":"<p><pre><code>InfoCast:SetScaler(func: (number, number, Vector3, Vector3) -&gt; (Vector3 | number))\n</code></pre> Sets the new <code>Scaler</code> function.</p>"},{"location":"Methods/#physics-methods","title":"Physics methods","text":""},{"location":"Methods/#isphysics","title":"IsPhysics","text":"<p><pre><code>Simulation:IsPhysics(): boolean\n</code></pre> Returns whether projectile has physics</p>"},{"location":"Methods/#setmass","title":"SetMass","text":"<p><pre><code>Simulation:SetMass(Mass: number)\n</code></pre> Sets the mass used for the physics simulation</p>"},{"location":"Methods/#addmass","title":"AddMass","text":"<p><pre><code>Simulation:AddMass(Mass: number)\n</code></pre> Adds to the mass used for the physics simulation</p>"},{"location":"Methods/#setliftpower","title":"SetLiftPower","text":"<p><pre><code>Simulation:SetLiftPower(LiftPower: number)\n</code></pre> Sets the lift power used for the physics simulation</p>"},{"location":"Methods/#addliftpower","title":"AddLiftPower","text":"<p><pre><code>Simulation:AddLiftPower(LiftPower: number)\n</code></pre> Adds to the lift power used for the physics simulation</p>"},{"location":"Methods/#setyawpower","title":"SetYawPower","text":"<p><pre><code>Simulation:SetYawPower(YawPower: number)\n</code></pre> Sets the yaw power used for the physics simulation</p>"},{"location":"Methods/#addyawpower","title":"AddYawPower","text":"<p><pre><code>Simulation:AddYawPower(YawPower: number)\n</code></pre> Adds to the yaw power used for the physics simulation</p>"},{"location":"Methods/#setdragcoefficient","title":"SetDragCoefficient","text":"<p><pre><code>Simulation:SetDragCoefficient(DragCoefficient: number)\n</code></pre> Sets the drag coefficient used for the physics simulation</p>"},{"location":"Methods/#adddragcoefficient","title":"AddDragCoefficient","text":"<p><pre><code>Simulation:AddDragCoefficient(DragCoefficient: number)\n</code></pre> Adds to the drag coefficient used for the physics simulation</p>"},{"location":"Methods/#setinduceddragyaw","title":"SetInducedDragYaw","text":"<p><pre><code>Simulation:SetInducedDragYaw(InducedDragYaw: number)\n</code></pre> Sets the yaw-induced drag value used for the physics simulation</p>"},{"location":"Methods/#addinduceddragyaw","title":"AddInducedDragYaw","text":"<p><pre><code>Simulation:AddInducedDragYaw(InducedDragYaw: number)\n</code></pre> Adds to the yaw-induced drag value used for the physics simulation</p>"},{"location":"Methods/#setinduceddragpitch","title":"SetInducedDragPitch","text":"<p><pre><code>Simulation:SetInducedDragPitch(InducedDragPitch: number)\n</code></pre> Sets the pitch-induced drag value used for the physics simulation</p>"},{"location":"Methods/#addinduceddragpitch","title":"AddInducedDragPitch","text":"<p><pre><code>Simulation:AddInducedDragPitch(InducedDragPitch: number)\n</code></pre> Adds to the pitch-induced drag value used for the physics simulation</p>"},{"location":"Methods/#setthrustpower","title":"SetThrustPower","text":"<p><pre><code>Simulation:SetThrustPower(ThrustPower: number)\n</code></pre> Sets the thrust power used for the physics simulation</p>"},{"location":"Methods/#addthrustpower","title":"AddThrustPower","text":"<p><pre><code>Simulation:AddThrustPower(ThrustPower: number)\n</code></pre> Adds to the thrust power used for the physics simulation</p>"},{"location":"Methods/#setglimit","title":"SetGLimit","text":"<p><pre><code>Simulation:SetGLimit(G_Limit: number)\n</code></pre> Sets the G limit used for the physics simulation</p>"},{"location":"Methods/#addglimit","title":"AddGLimit","text":"<p><pre><code>Simulation:AddGLimit(MaxAngle: number)\n</code></pre> Adds to the G limit used for the physics simulation</p>"},{"location":"Methods/#setpitchaoa","title":"SetPitchAoA","text":"<p><pre><code>Simulation:SetPitchAoA(PitchAoA: {})\n</code></pre> Sets the angle of attack curve for pitch in the physics simulation</p>"},{"location":"Methods/#yawaoa","title":"YawAoA","text":"<p><pre><code>Simulation:YawAoA(YawAoA: {})\n</code></pre> Sets the angle of attack curve for yaw in the physics simulation</p>"},{"location":"Methods/#setadditionalforces","title":"SetAdditionalForces","text":"<p><pre><code>Simulation:SetAdditionalForces(Force: Vector3)\n</code></pre> Sets the additional forces applied to the physics simulation</p>"},{"location":"Methods/#addadditionalforces","title":"AddAdditionalForces","text":"<p><pre><code>Simulation:AddAdditionalForces(Force: Vector3)\n</code></pre> Adds to the additional forces applied to the physics simulation</p>"},{"location":"Parallel/","title":"This feature was removed in update 1.7","text":"<p>To enable this feature, do the following:</p> <pre><code>local HomingCast = require(game.ReplicatedStorage.HomingCast)\n\nHomingCast.AmountOfActors = 10\nHomingCast.PositionSendDelay = 0.1\n\nlocal caster = HomingCast.new()\n</code></pre> <p>What is PositionSendDelay?</p> <p>PositionSendDelay determines how often the PositionChanged signal is fired</p> <p>The smaller the PositionSendDelay is, the fewer projectiles you can handle</p> <p>Note!</p> <p>AmountOfActors and PositionSendDelay must be set before creating a new caster!</p> <p>Parallel mode can only be used on server side!</p>"},{"location":"Parallel/#recommendation","title":"Recommendation","text":"<p>I don't recommend using this feature, as it won\u2019t allow significantly more projectiles at once, and the following features are not available in parallel mode:</p> <p>1) All methods are unavailable</p> <p>2) Visualization is unavailable</p> <p>3) Offset, Scaler, CosmeticBulletTemplate and SimulateBeforePhysics properties are unavailable</p> <p>Additionally, to use signals, you must add .Event due to the use of BindableEvents</p> <p>Example</p> <pre><code>caster.PositionChanged.Event:Connect()\n</code></pre>"},{"location":"Physics/","title":"Physics Simulation","text":""},{"location":"Physics/#physics-properties-allow-you-to-simulate-realisitic-physics","title":"Physics properties allow you to simulate realisitic physics","text":"<p>To access these properties, you first need to require the module:</p> <pre><code>local HomingCast = require(.../HomingCast)\n</code></pre> <p>Then, create the properties:</p> <pre><code>local PhysicsProperties: {} = HomingCast.NewPhysicsProperties()\n</code></pre> <p>How does this physics work?</p> <p>This physics is based on missile's physics</p> <p></p> <p>Beware!</p> <p>If you use physics, do not set physics properties to extremely high values as it can lead to jittering</p> <p>Everything must be balanced</p>"},{"location":"Physics/#heres-all-properties","title":"Here's all properties","text":""},{"location":"Physics/#mass","title":"Mass","text":"<p><pre><code>PhysicsProperties.Mass :: number\n</code></pre> Mass of the cast</p>"},{"location":"Physics/#liftpower","title":"LiftPower","text":"<p><pre><code>PhysicsProperties.LiftPower :: number\n</code></pre> This is a constant for the lift coefficient. Determines aerodynamic capabilities of the cast for pitch</p>"},{"location":"Physics/#yawpower","title":"YawPower","text":"<p><pre><code>PhysicsProperties.YawPower :: number\n</code></pre> This is a constant for the yaw coefficient. Determines aerodynamic capabilities of the cast for yaw</p>"},{"location":"Physics/#dragcoefficient","title":"DragCoefficient","text":"<p><pre><code>PhysicsProperties.DragCoefficient :: number\n</code></pre> Determines the resistance of the cast in a fluid environment</p>"},{"location":"Physics/#induceddragyaw","title":"InducedDragYaw","text":"<p><pre><code>PhysicsProperties.InducedDragYaw :: number\n</code></pre> Determines the resistance of the cast in a fluid environment when rotating on the yaw axis</p>"},{"location":"Physics/#induceddragpitch","title":"InducedDragPitch","text":"<p><pre><code>PhysicsProperties.InducedDragPitch :: number\n</code></pre> Determines the resistance of the cast in a fluid environment when rotating on the pitch axis</p>"},{"location":"Physics/#thrustpower","title":"ThrustPower","text":"<p><pre><code>PhysicsProperties.ThrustPower :: number\n</code></pre> Sets the force which constantly pushes the cast in its look direction</p>"},{"location":"Physics/#pitchaoa","title":"PitchAoA","text":"<p><pre><code>PhysicsProperties.PitchAoA :: {}\n</code></pre> This is a list which determines the lift coefficient at some angle of attack</p> <p>Example</p> <pre><code>PhysicsProperties.PitchAoA = {\n    {[\"Value\"] = -0.12,[\"AoA\"] = -65},\n    {[\"Value\"] = -1,[\"AoA\"] = -25},\n    {[\"Value\"] = 0,[\"AoA\"] = 0},\n    {[\"Value\"] = 1,[\"AoA\"] = 25},\n    {[\"Value\"] = 0.12,[\"AoA\"] = 65}\n}\n</code></pre> <p>Recommendations</p> <p><code>Value</code> should be from [-1 to 1]. But you can set to any value you want</p> <p>How do I get this table?</p> <p>Use my plugin for this and change the mode to <code>AoA</code></p> <p>Read about it here</p>"},{"location":"Physics/#yawaoa","title":"YawAoA","text":"<p><pre><code>PhysicsProperties.YawAoA :: {}\n</code></pre> This is a list which determines the yaw coefficient at some angle of attack yaw</p> <p>Example</p> <pre><code>PhysicsProperties.YawAoA = {\n    {[\"Value\"] = -0.12,[\"AoA\"] = -65},\n    {[\"Value\"] = -1,[\"AoA\"] = -25},\n    {[\"Value\"] = 0,[\"AoA\"] = 0},\n    {[\"Value\"] = 1,[\"AoA\"] = 25},\n    {[\"Value\"] = 0.12,[\"AoA\"] = 65}\n}\n</code></pre> <p>Recommendations</p> <p><code>Value</code> should be from [-1 to 1]. But you can set to any value you want</p> <p>How do I get this table?</p> <p>Use my plugin for this and change the mode to <code>AoA</code></p> <p>Read about it here</p> <p>Remember</p> <p>The <code>Value</code> will be smoothed from one to another value based on given angle of attack (pitch / yaw)</p>"},{"location":"Physics/#g_limit","title":"G_Limit","text":"<p><pre><code>PhysicsProperties.G_Limit :: number\n</code></pre> G limit of the projectile</p>"},{"location":"Physics/#additionalforces","title":"AdditionalForces","text":"<p><pre><code>PhysicsProperties.AdditionalForces :: Vector3\n</code></pre> Additional force which will effect on the cast constantly</p>"},{"location":"Properties/","title":"Properties","text":"<p>To access properties, you first need to require the module:</p> <pre><code>local HomingCast = require(.../HomingCast)\n</code></pre> <p>Then, create the properties:</p> <pre><code>local Properties: {} = HomingCast.NewProperties()\n</code></pre> <p>Can I create more <code>Properties</code>?</p> <p>Yes, you can! This can be useful for different scenarios. For example, if your spell hits something and creates sub-spells, you can create additional properties to give them different behaviors</p>"},{"location":"Properties/#there-are-a-lot-of-properties-and-they-all-are-listed-here","title":"There are a lot of properties and they all are listed here!","text":""},{"location":"Properties/#maxdistance","title":"MaxDistance","text":"<p><pre><code>Properties.MaxDistance :: number\n</code></pre> If the cast covers this distance, it will be terminated</p> <p>Terminated!</p> <p>This will fire: <pre><code>Caster.Terminated(InfoCast, Reason: string, CosmeticBullet: BasePart?, UserData: {})\n</code></pre> The <code>Reason</code> will be <code>\"MaxDistance\"</code></p>"},{"location":"Properties/#maxflytime","title":"MaxFlyTime","text":"<p><pre><code>Properties.MaxFlyTime :: number\n</code></pre> If the cast flies longer than this value, it will be terminated</p> <p>Terminated!</p> <p>This will fire: <pre><code>Caster.Terminated(InfoCast, Reason: string, CosmeticBullet: BasePart?, UserData: {})\n</code></pre> The <code>Reason</code> will be <code>\"MaxFlyTime\"</code></p>"},{"location":"Properties/#rotationspeed","title":"RotationSpeed","text":"<p><pre><code>Properties.RotationSpeed :: number\n</code></pre> Defines the speed at which the cast turns</p>"},{"location":"Properties/#rayspermove","title":"RaysPerMove","text":"<p><pre><code>Properties.RaysPerMove :: number\n</code></pre> Determines how many raycasts will be fired in one move.</p> <p>Performance Warning!</p> <p>Setting this value too high (e.g., 20 or more) can cause significant lag</p> <p>Recommended values range from 1 to 5</p>"},{"location":"Properties/#maxangletolosethetarget","title":"MaxAngleToLoseTheTarget","text":"<p><pre><code>Properties.MaxAngleToLoseTheTarget :: number\n</code></pre> If the target moves outside this angle, the cast will lose track of it</p>"},{"location":"Properties/#simulatebeforephysics","title":"SimulateBeforePhysics","text":"<p><pre><code>Properties.SimulateBeforePhysics :: boolean\n</code></pre> If <code>true</code>, the projectile will be simulated before physics calculations (Optional)</p>"},{"location":"Properties/#raycastparams","title":"RayCastParams","text":"<p><pre><code>Properties.RayCastParams :: RaycastParams\n</code></pre> Defines the <code>RaycastParams</code> for the cast (Optional)</p>"},{"location":"Properties/#cosmeticbulletfolder","title":"CosmeticBulletFolder","text":"<p><pre><code>Properties.CosmeticBulletFolder :: any?\n</code></pre> The folder used to contain cosmetic bullets</p>"},{"location":"Properties/#cosmeticbullettemplate","title":"CosmeticBulletTemplate","text":"<p><pre><code>Properties.CosmeticBulletTemplate :: any?\n</code></pre> The cosmetic bullet itself</p>"},{"location":"Properties/#prediction","title":"Prediction","text":"<p><pre><code>Properties.Prediction :: boolean\n</code></pre> If <code>false</code>, target prediction is disabled. If <code>true</code> then module will predict the target's future position based on its velocity and position</p>"},{"location":"Properties/#trajectory","title":"Trajectory","text":"<p><pre><code>Properties.Trajectory :: {}?\n</code></pre> If not <code>nil</code>, the projectile will attempt to follow the given trajectory. (Optional)</p> <p>For more information, see Custom Trajectories.</p> <p>Example</p> <pre><code>Properties.Trajectory = {\n    {Yscale = 0.3, Xscale = 0.12220414727926254, State = \"Free\", MaxHeight = 150},\n    {Yscale = 0.6, Xscale = 0.310281366109848, State = \"Free\", MaxHeight = 150},\n    {Yscale = 0.6, Xscale = 0.903989744186401, State = \"Free\", CheckPoint = \"Above\", MaxHeight = 150},\n}\n</code></pre>"},{"location":"Properties/#highprecision","title":"HighPrecision","text":"<p><pre><code>Properties.HighPrecision :: number\n</code></pre> If this value is greater than <code>0</code> (e.g., <code>0.1, 0.2, 0.3, ..., 1</code>), the module will perform a secondary accuracy check after a low-fidelity raycast detects a hit. This value determines how precise the recalculations will be. (Optional)</p> <p></p> <p>Performance Warning!</p> <p>Setting this value to extreme small numbers (e.g., <code>0.01</code> or smaller) can cause significant lag</p> <p>Recommended values range from 0.1</p>"},{"location":"Properties/#offset","title":"Offset","text":"<p><pre><code>Properties.Offset :: ((TotalTime: number, DeltaTime: number, TargetPosition: Vector3, CurrentPosition: Vector3) -&gt; (Vector3))?\n</code></pre> This function affects the target's position</p> <p>Example</p> <p><pre><code>Properties.Offset = function(TotalTime, DeltaTime, TargetPosition, CurrentPosition)\n    return Vector3.new(0, 10, 0)\nend\n</code></pre> The projectile will fly above the target's actual position</p> <p>How does Offset work?</p> <pre><code>TargetPosition += Offset(TotalTime, DeltaTime, TargetPosition, CurrentPosition)\n</code></pre>"},{"location":"Properties/#scaler","title":"Scaler","text":"<p><pre><code>Properties.Scaler :: ((TotalTime: number, DeltaTime: number, TargetPosition: Vector3, CurrentPosition: Vector3) -&gt; (Vector3 | number))?\n</code></pre> This function affects the target's position</p> <p>How does Scaler work?</p> <pre><code>TargetPosition *= Scaler(TotalTime, DeltaTime, TargetPosition, CurrentPosition)\n</code></pre> <p>Remember!</p> <p>First, the target's position will be scaled, and then an offset will be applied <pre><code>TargetPosition = TargetPosition * Scaler(...) + Offset(...)\n</code></pre></p>"},{"location":"Properties/#userdata","title":"UserData","text":"<p><pre><code>Properties.UserData :: {[any]: any}\n</code></pre> Stores custom data</p>"},{"location":"Updates/","title":"Updates","text":""},{"location":"Updates/#update-17","title":"Update [1.7]","text":"<p>Date: 13.08.2025  </p>"},{"location":"Updates/#changed-property-name","title":"Changed property name:","text":"<ul> <li>MaxAngle -&gt; G_Limit</li> </ul>"},{"location":"Updates/#optimizations","title":"Optimizations:","text":"<ul> <li>Significantly optimized custom trajectory code</li> </ul>"},{"location":"Updates/#updates","title":"Updates","text":"<ul> <li>Removed parallel mode</li> <li>Reworked custom trajectory plugin</li> <li>Removed batch system</li> </ul>"},{"location":"Updates/#added-new-methods","title":"Added new methods:","text":"<ul> <li>SetTimer</li> <li>IsPhysics</li> <li>GetCosmeticBullet </li> <li>SetScaler</li> <li>SetOffset</li> </ul>"},{"location":"Updates/#update-16","title":"Update [1.6]","text":"<p>Date: 06.06.2025  </p>"},{"location":"Updates/#added-properties","title":"Added properties:","text":"<ul> <li>Offset</li> <li>Scaler</li> </ul>"},{"location":"Updates/#updates_1","title":"Updates","text":"<ul> <li>Added parallel mode</li> </ul>"},{"location":"Updates/#update-15","title":"Update [1.5]","text":"<p>Date: 12.03.2025  </p>"},{"location":"Updates/#changed-method-names","title":"Changed method names:","text":"<ul> <li>MaxAngle -&gt; MaxAngleToLoseTheTarget   </li> </ul>"},{"location":"Updates/#optimizations_1","title":"Optimizations:","text":"<ul> <li>Optimized custom trajectory code a bit</li> <li>General optimizations</li> </ul>"},{"location":"Updates/#updates_2","title":"Updates","text":"<ul> <li>Updated custom trajectory plugin</li> <li>Added realistic physics simulation</li> </ul>"},{"location":"Updates/#update-14","title":"Update [1.4]","text":"<p>Date: 27.03.2025  </p>"},{"location":"Updates/#changed-names","title":"Changed names:","text":"<ul> <li>HighFidelitySegmentSize -&gt; RaysPerMove  </li> <li>UseHighPrecision -&gt; HighPrecision  </li> <li>PredictionEquation -&gt; Prediction  </li> <li>GetAllActiveCast() -&gt; GetAllInfoCast()  </li> </ul>"},{"location":"Updates/#optimizations_2","title":"Optimizations:","text":"<ul> <li>Fully re-wrote the code for custom trajectory due to its high inefficiency.   Now, it's optimized and it's no longer a <code>beta feature</code>!  </li> </ul>"},{"location":"Updates/#deleted","title":"Deleted:","text":"<ul> <li>The <code>distance</code> setting was deleted from the trajectory plugin.  </li> <li>The <code>Ahead</code> setting was deleted from the trajectory plugin.  </li> </ul>"},{"location":"Updates/#update-13","title":"Update [1.3]","text":"<p>Date: 16.03.2025  </p>"},{"location":"Updates/#added-new-property","title":"Added new property:","text":"<ul> <li>Trajectory   Currently a <code>beta feature</code> </li> </ul>"},{"location":"Updates/#added-new-methods_1","title":"Added new methods:","text":"<ul> <li>PauseTrajectory  </li> <li>UnPauseTrajectory  </li> <li>IsPausedTrajectory  </li> <li>SetXscale  </li> <li>SetYscale  </li> </ul>"},{"location":"Updates/#created-new-plugin","title":"Created new plugin:","text":"<ul> <li>Plugin </li> </ul>"},{"location":"Updates/#deleted_1","title":"Deleted:","text":"<ul> <li><code>AlignBetweenTargetAndPart</code> property was deleted and replaced by the <code>Trajectory</code> property.  </li> </ul>"},{"location":"Updates/#simulatebeforephysics-property-is-enabled","title":"<code>SimulateBeforePhysics</code> property is enabled","text":""},{"location":"Updates/#update-12","title":"Update [1.2]","text":"<p>Date: 10.03.2025  </p>"},{"location":"Updates/#added-new-setting","title":"Added new setting:","text":"<pre><code>local HomingCast = require(.../HomingCast)  \nHomingCast.BatchSize = (number)\n</code></pre>"},{"location":"Updates/#added-new-function","title":"Added new function:","text":"<ul> <li>GetAllActiveCast()</li> </ul>"},{"location":"Updates/#added-new-methods_2","title":"Added new methods:","text":"<ul> <li>SetPosition</li> <li>SetDirection</li> <li>GetDirection</li> </ul>"},{"location":"Updates/#bug-fixes","title":"Bug fixes:","text":"<ul> <li>Fixed a bug with <code>UseHighPrecision</code> property where it didn't work as intended</li> </ul>"},{"location":"Updates/#simulatebeforephysics-property-is-temporarily-disabled","title":"<code>SimulateBeforePhysics</code> property is temporarily disabled","text":""},{"location":"Updates/#update-11","title":"Update [1.1]","text":"<p>Date: 08.03.2025</p>"},{"location":"Updates/#added-new-property_1","title":"Added new property:","text":"<ul> <li>UseHighPrecision</li> </ul>"},{"location":"Updates/#added-new-methods_3","title":"Added new methods:","text":"<ul> <li>SetHighPrecision</li> </ul>"}]}